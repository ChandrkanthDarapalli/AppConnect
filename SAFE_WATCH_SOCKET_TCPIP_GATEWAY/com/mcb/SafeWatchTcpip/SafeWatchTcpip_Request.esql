BROKER SCHEMA com.mcb.SafeWatchTcpip
PATH com.mcb.logging,com.mcb.procedures,com.mcb.common;

CREATE COMPUTE MODULE SafeWatchTcpip_Request
--fwsfsfsrfs
		DECLARE comRef REFERENCE TO Environment.CARD.JSON.Data.CONFIG_FILE.COMMON;
	    DECLARE basicRef REFERENCE TO Environment.CARD.JSON.Data.CONFIG_FILE.SAFE_WATCH_SOCKET_TCPIP_GATEWAY.BASIC;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RoutingRequest();
		RETURN TRUE;
	END;

	CREATE PROCEDURE RoutingRequest() BEGIN
			--Identifying and storing Reply protocol
		SET Environment.Variables.Reply_Protocol = InputRoot.Properties.ReplyProtocol;
		DECLARE requestTime TIMESTAMP InputRoot.Properties.CreationTime;
		SET Environment.Variable.channelName = 'cbs';
		SET Environment.Variable.applicationName = basicRef.APPLICATION_IDENTIFIER;
		SET Environment.Variables.correlationId = InputLocalEnvironment.TCPIP.Input.ConnectionDetails.Id;
		--Getting input request from message tree and storing into character
		DECLARE inputChar, outputChar CHARACTER;
		SET inputChar = CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		DECLARE outRefer REFERENCE TO OutputRoot;
		--logging
		CALL GenarateDBLogMessage2(Environment.Variable.channelName, Environment.Variable.applicationName, CAST(Environment.Variables.correlationId AS CHARACTER), '', requestTime, 'Info', comRef.WEB_SERVICE, Environment.Variables.Reply_Protocol, basicRef.APPLICATION_IDENTIFIER, 'InputMsg', inputChar, outRefer);
		PROPAGATE TO LABEL 'LOGGING';
		SET OutputRoot = NULL;
		--Constructing headers and sending to corresponding app
		SET OutputRoot.MQMD.MsgId = CAST(InputLocalEnvironment.TCPIP.Input.ConnectionDetails.Id AS BLOB CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		SET OutputRoot.MQMD.CorrelId = CAST(InputLocalEnvironment.TCPIP.Input.ConnectionDetails.Id AS BLOB CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		SET OutputRoot.MQRFH2.usr.Method = basicRef.METHOD;
		SET OutputRoot.MQRFH2.usr.Channel = basicRef.CHANNEL;
		SET OutputRoot.MQRFH2.usr.ESB_CorrelId = InputLocalEnvironment.TCPIP.Input.ConnectionDetails.Id;
		SET OutputRoot.MQRFH2.usr.ESB_ReplyProtocol = Environment.Variables.Reply_Protocol;
		SET OutputRoot.MQRFH2.usr.ESB_ReplyIdentifier = InputLocalEnvironment.TCPIP.Input.ConnectionDetails.Id;

		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME 'Safe_Watch_Socket_Req';
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data.Safe_Watch_Socket_Req;
		
		-- DECLARE inputChar CHARACTER '0000000029123456789123456789|1324|12345{EOM}';
		-- sw_apiM|pass4321|1|JASIM UDDIN||||||NAME||||97|0|0|Y|N|Y
		-- sw_apiM|IzkllSwWmQKkENB0Us0/Gg==|1|JASIM UDDIN||||||NAME||||97|0|0|true|false|true
	
		SET inputChar = TRIM(TRAILING '{EOM}' FROM SUBSTRING(inputChar FROM 11));
		CALL FormatRequestData('|', inputChar);
		
	    SET outRef.User = Environment.Values[1];
		SET outRef.Password = Environment.Values[2];
		SET outRef.Zone_Id = Environment.Values[3];
		SET outRef.Data = Environment.Values[4];
		SET outRef.Address = Environment.Values[5];
		SET outRef.Bic = Environment.Values[6];
		SET outRef.City = Environment.Values[7];
		SET outRef.Context = Environment.Values[8];
		SET outRef.Country = Environment.Values[9];
		SET outRef.Format = Environment.Values[10];
		SET outRef.Record_Id = Environment.Values[11];
		SET outRef.Record_Location = Environment.Values[12];
		SET outRef.Scan_Session_Id = Environment.Values[13];
		SET outRef.Rank = Environment.Values[14];
		SET outRef.Check_Vessels = Environment.Values[15];
		SET outRef.Check_Country = Environment.Values[16];
		SET outRef.Positive_Detection = Environment.Values[17];
		SET outRef.Full_Report = Environment.Values[18];
		SET outRef.Auto_Create_Alert = Environment.Values[19];
		
	    SET Environment.OutData = OutputRoot;
		SET outputChar = CAST(ASBITSTREAM(OutputRoot.JSON) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		SET OutputRoot = NULL;
		CALL GenarateDBLogMessage2(Environment.Variable.channelName, Environment.Variable.applicationName, CAST(Environment.Variables.correlationId AS CHARACTER), '', requestTime, 'Info', comRef.WEB_SERVICE, Environment.Variables.Reply_Protocol, basicRef.APPLICATION_IDENTIFIER, 'BuildSafeWatchSocketV1Req', outputChar, outRefer);
		PROPAGATE TO LABEL 'LOGGING';
		SET OutputRoot = NULL;

	--	SET OutputRoot.Properties = Environment.OutData.Properties;
	--	SET OutputRoot.MQMD = Environment.OutData.MQMD;
		SET OutputRoot.MQMD.MsgId = InputRoot.MQMD.MsgId;
		SET OutputRoot.MQMD.CorrelId = InputRoot.MQMD.MsgId;    -- need to remove after DEV testing ******************
		SET OutputRoot.MQRFH2 = Environment.OutData.MQRFH2;
		SET OutputRoot.JSON = Environment.OutData.JSON;

	END;

	CREATE PROCEDURE FormatRequestData(IN delimiter CHARACTER, IN inputChar CHARACTER)
	BEGIN
		DECLARE subStrValue CHARACTER;
		DECLARE I INTEGER 1;
		WHILE inputChar <> '' DO
			IF CONTAINS(inputChar, delimiter) THEN
				SET subStrValue = SUBSTRING(inputChar BEFORE CAST(delimiter AS CHARACTER));
			ELSE
				SET subStrValue = inputChar;
			END IF;
			SET inputChar = TRIM(LEADING CAST(subStrValue AS CHARACTER) FROM inputChar);
			
			IF I >= 15 THEN
				IF subStrValue = 'Y' THEN
					SET Environment.Values[I] = 'true';
				ELSEIF subStrValue = 'N' THEN
					SET Environment.Values[I] = 'false';
				ELSE	
					SET Environment.Values[I] = COALESCE(subStrValue, '');
				END IF;
			ELSE
				SET Environment.Values[I] = COALESCE(subStrValue, '');
			END IF;

			SET inputChar = SUBSTRING(inputChar AFTER '|');
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
